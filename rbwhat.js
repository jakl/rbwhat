#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
(function() {
  var client, colorName, config, formatDate, formatHeading, fs, loadConfigOrDefault, main, moment, needsReview, printActiveRequest, querystringify, rbapi, tooOld;

  require('colors');

  moment = require('moment');

  querystringify = (require('querystring')).stringify;

  client = new (require('node-rest-client')).Client();

  fs = require('fs');

  config = {
    user: 'test',
    url: 'https://reviewboard.twitter.biz/',
    group: 'intl-eng-test',
    daysOld: 14
  };

  main = function() {
    var filter;
    loadConfigOrDefault();
    filter = {
      status: 'pending',
      'to-groups': config.group
    };
    return rbapi('api/review-requests/', filter, function(res) {
      return res.review_requests.forEach(printActiveRequest);
    });
  };

  loadConfigOrDefault = function() {
    var config_path;
    config_path = process.env.HOME + '/.rbwhat.json';
    if (fs.existsSync(config_path)) {
      config = JSON.parse(fs.readFileSync(config_path).toString());
      if (!config.daysOld) {
        config.dasyOld = 14;
        console.log('Add this to the top of ~/.rbwhat.json\
                   \n  "daysOld": 14,\
                   \nYou can now limit reviews to a certain age in days.\
                   \nDefaulting to 14 now...');
      }
      config.allowedAge = new Date();
      config.allowedAge.setDate(config.allowedAge.getDate() - config.daysOld);
    } else {
      fs.writeFileSync(config_path, JSON.stringify(config, null, 2));
    }
    if (config.user === 'test') {
      return console.log('Set options in ~/.rbwhat.json');
    }
  };

  rbapi = function(path, args, cb) {
    var query;
    query = '?' + querystringify(args);
    return client.get(config.url + path + query, function(res) {
      return cb(JSON.parse(res));
    });
  };

  printActiveRequest = function(request) {
    var submitter;
    submitter = request.links.submitter.title;
    return rbapi("api/review-requests/" + request.id + "/reviews/", null, function(res) {
      var date, needs_review, output, review, reviewer, _i, _len, _ref;
      needs_review = config.user !== submitter && !tooOld(request.time_added);
      output = formatHeading(submitter, request);
      _ref = res.reviews;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        review = _ref[_i];
        date = review.timestamp;
        reviewer = review.links.user.title;
        needs_review = needsReview(reviewer, submitter, needs_review, date);
        output.push('    ' + colorName(reviewer, submitter, review.ship_it) + ' ' + formatDate(date));
      }
      if (needs_review) {
        return console.log(output.join('\n'));
      }
    });
  };

  formatHeading = function(submitter, request) {
    var url;
    url = "" + config.url + "r/" + request.id + "/diff";
    return ["" + (colorName(submitter, submitter)) + ": " + request.summary.yellow, "  " + url.underline + " " + (formatDate(request.time_added))];
  };

  formatDate = function(date) {
    return moment(new Date(date)).fromNow().cyan;
  };

  tooOld = function(date) {
    return new Date(date) < config.allowedAge;
  };

  colorName = function(name, submitter, shipit) {
    switch (name) {
      case config.user:
        return name.cyan;
      case submitter:
        return name.magenta;
      default:
        if (shipit) {
          return name.green;
        } else {
          return name.red;
        }
    }
  };

  needsReview = function(reviewer, submitter, needs_review, date) {
    if (config.user === reviewer) {
      return false;
    } else if (tooOld(date)) {
      return false;
    } else if (reviewer === submitter) {
      return true;
    } else if (submitter === config.user) {
      return true;
    } else {
      return needs_review;
    }
  };

  main();

}).call(this);
